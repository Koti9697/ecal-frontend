// In src/utils/reportGenerator.ts

import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { type User } from '../types/User';
import { evaluate } from 'mathjs';

const getGlobalFieldIndex = (dataInputSections, sIdx, fIdx) => {
    let count = 0;
    for (let i = 0; i < sIdx; i++) { count += dataInputSections[i].fields.length; }
    return count + fIdx;
};

// --- FIX: Re-engineered Header/Footer logic ---
const addHeaderAndFooter = (doc: jsPDF, title: string, user: User | null, data: any) => {
    const pageNumber = data.pageNumber;
    const pageCount = (doc as any).internal.getNumberOfPages();
    const pageHeight = doc.internal.pageSize.getHeight();
    const pageWidth = doc.internal.pageSize.getWidth();

    // Header is drawn on every page
    doc.setFontSize(16);
    doc.text(title, 14, 22);
    doc.setFontSize(10);
    doc.text(`Report Generated By: ${user?.username || 'N/A'}`, 14, 30);
    doc.text(`Generation Date: ${new Date().toLocaleString()}`, pageWidth - 14, 30, { align: 'right' });
    doc.line(14, 35, pageWidth - 14, 35);

    // Footer is drawn on every page
    doc.setFontSize(8);
    doc.text(`Page ${pageNumber} of ${pageCount}`, pageWidth / 2, pageHeight - 10, { align: 'center' });
    doc.text('CalJar Confidential', 14, pageHeight - 10);
    doc.text('Generated from a Validated System', pageWidth - 14, pageHeight - 10, { align: 'right' });
};

export const generateRecordPdf = (record: any, user: User | null, formValues: any, selectedSections: string[]) => {
    const doc = new jsPDF();
    const docTitle = `Analytical Record Report: ${record.record_id_display}`;
    let finalY = 0; 
    const tableMargin = { top: 40, bottom: 20 };
    const docData = record.template.document_data || {};
    const didDrawPage = (data) => addHeaderAndFooter(doc, docTitle, user, data);
    let allBodyRows = [];

    // --- Re-engineered to build a single table body ---

    if (selectedSections.includes('Record Details')) {
        allBodyRows.push([{ content: 'Record Details', colSpan: 2, styles: { fontStyle: 'bold', fillColor: '#d3d3d3' } }]);
        allBodyRows.push(['Record ID', record.record_id_display]);
        allBodyRows.push(['Status', record.status]);
        allBodyRows.push(['Template', `${record.template.name} ${record.template.version}`]);
        allBodyRows.push(['Created By', record.created_by.username]);
        allBodyRows.push(['Created At', new Date(record.created_at).toLocaleString()]);
    }

    if (selectedSections.includes('Data & Results')) {
         if (docData.sampleInfo?.fields?.length > 0) {
            allBodyRows.push([{ content: 'Analysis Information', colSpan: 2, styles: { fontStyle: 'bold', fillColor: '#d3d3d3' } }]);
            docData.sampleInfo.fields.forEach(field => {
                allBodyRows.push([field.label, formValues[field.id] || field.value || 'N/A']);
            });
        }

        if (docData.dataInputs?.sections?.length > 0) {
            docData.dataInputs.sections.forEach((section, sIdx) => {
                allBodyRows.push([{ content: section.title, colSpan: 2, styles: { fontStyle: 'bold', fillColor: '#d3d3d3' } }]);
                section.fields.forEach((field, fIdx) => {
                    const cellId = `A${getGlobalFieldIndex(docData.dataInputs.sections, sIdx, fIdx) + 1}`;
                    allBodyRows.push([field.label, formValues[cellId] || 'N/A']);
                });
            });
        }
        
        if (docData.calculation?.formulas?.length > 0) {
            allBodyRows.push([{ content: 'Results', colSpan: 2, styles: { fontStyle: 'bold', fillColor: '#d3d3d3' } }]);
            docData.calculation.formulas.forEach(formula => {
                let expression = formula.value.startsWith('=') ? formula.value.substring(1) : formula.value;
                const variables = new Set([...(expression.match(/A\d+/g) || [])]);
                let allInputsProvided = true;
                variables.forEach(variable => {
                    const value = formValues[variable];
                    if (value === undefined || value === null || value === '') { allInputsProvided = false; }
                    expression = expression.replace(new RegExp(`\\b${variable}\\b`, 'g'), value);
                });
                let resultText = "Calculation pending...";
                if(allInputsProvided) {
                    try {
                        const result = evaluate(expression);
                        resultText = typeof result === 'number' ? (Math.round(result * 100) / 100).toFixed(2) : String(result);
                    } catch (e) { resultText = "Invalid formula or data"; }
                }
                allBodyRows.push([formula.label, resultText]);
            });
        }
    }

    autoTable(doc, {
        startY: tableMargin.top,
        body: allBodyRows,
        theme: 'grid',
        margin: tableMargin,
        didDrawPage,
    });
    
    finalY = (doc as any).lastAutoTable.finalY;

    if (selectedSections.includes('Signatures') && record.signatures?.length > 0) {
        autoTable(doc, {
            startY: finalY + 10,
            head: [['Action', 'Signed By', 'Date & Time']],
            body: record.signatures.map(s => [s.meaning, s.signed_by.username, new Date(s.signed_at).toLocaleString()]),
            margin: tableMargin,
            didDrawPage,
        });
        finalY = (doc as any).lastAutoTable.finalY;
    }

    if (selectedSections.includes('Audit Trail') && record.audit_trail?.length > 0) {
        autoTable(doc, {
            startY: finalY + 10,
            head: [['Date & Time', 'User', 'Action', 'Reason', 'Old Value', 'New Value']],
            body: record.audit_trail.map(log => [new Date(log.timestamp).toLocaleString(), log.user.username, log.details, log.reason_for_change, log.previous_value, log.new_value]),
            margin: tableMargin,
            didDrawPage,
        });
    }

    addHeaderAndFooter(doc, docTitle, user, { pageNumber: (doc as any).internal.getNumberOfPages() });
    doc.save(`${record.record_id_display}_Report.pdf`);
};

export const generateTemplatePdf = (template: any, user: User | null, selectedSections: string[]) => {
    const doc = new jsPDF();
    const docTitle = `Template Qualification Report: ${template.name} ${template.version}`;
    const tableMargin = { top: 40, bottom: 20 };
    const docData = template.document_data || {};
    const didDrawPage = (data) => addHeaderAndFooter(doc, docTitle, user, data);
    let allBodyRows = [];
    let sectionCounter = 1;

    // --- Re-engineered to build a single table body ---

    const hasInfoSection = selectedSections.includes('Template Details') || selectedSections.includes('Analysis Information');
    if (hasInfoSection) {
        allBodyRows.push([{ content: `${sectionCounter}. Template & Analysis Info`, colSpan: 3, styles: { fontStyle: 'bold', fillColor: '#d3d3d3', textColor: 0 } }]);
        sectionCounter++;

        allBodyRows.push([{ content: 'Template Information', colSpan: 3, styles: { fontStyle: 'italic', fillColor: '#f0f0f0'} }]);
        allBodyRows.push(['Template Name', template.name, '']);
        allBodyRows.push(['Version', template.version, '']);
        allBodyRows.push(['Status', template.status, '']);
        if (docData.header?.fields?.length > 0) {
            docData.header.fields.forEach(field => {
                allBodyRows.push([field.label, field.value, '']);
            });
        }
    
        if (docData.sampleInfo?.fields?.length > 0 && selectedSections.includes('Analysis Information')) {
            allBodyRows.push([{ content: 'Analysis Information Fields', colSpan: 3, styles: { fontStyle: 'italic', fillColor: '#f0f0f0'} }]);
            docData.sampleInfo.fields.forEach(field => {
                allBodyRows.push([field.label, field.value || 'N/A', '']);
            });
        }
    }
    
    const hasDataCalcSection = selectedSections.some(s => docData.dataInputs?.sections?.some(ds => ds.title === s) || s === 'Formula Design');
    if (hasDataCalcSection) {
        allBodyRows.push([{ content: `${sectionCounter}. Data & Calculations`, colSpan: 3, styles: { fontStyle: 'bold', fillColor: '#d3d3d3', textColor: 0 } }]);
        sectionCounter++;
    }

    if (docData.dataInputs?.sections?.length > 0) {
        docData.dataInputs.sections.forEach((section, sIdx) => {
            if (selectedSections.includes(section.title)) {
                allBodyRows.push([{ content: section.title, colSpan: 3, styles: { fontStyle: 'italic', fillColor: '#f0f0f0'} }]);
                section.fields.forEach((field, fIdx) => {
                     const cellId = `A${getGlobalFieldIndex(docData.dataInputs.sections, sIdx, fIdx) + 1}`;
                     const validationType = field.validation?.type || 'Any';
                     allBodyRows.push([field.label, `Cell ID: ${cellId}`, validationType]);
                });
            }
        });
    }

    if (selectedSections.includes('Formula Design') && docData.calculation?.formulas?.length > 0) {
        allBodyRows.push([{ content: 'Formula Design', colSpan: 3, styles: { fontStyle: 'italic', fillColor: '#f0f0f0'} }]);
        docData.calculation.formulas.forEach(f => {
            allBodyRows.push([f.label, f.value, '']);
        });
    }

    autoTable(doc, {
        startY: tableMargin.top,
        body: allBodyRows,
        theme: 'grid',
        margin: tableMargin,
        didDrawPage,
        columnStyles: { 0: { fontStyle: 'bold' }, 1: { cellWidth: 'auto' }, 2: { cellWidth: 'auto' } }
    });

    let finalY = (doc as any).lastAutoTable.finalY;
    
    if (selectedSections.includes('Verification Data') && template.document_data?.verification_data) {
        const titleContent = `${sectionCounter}. Template Verification`;
        sectionCounter++;
        
        const fieldIdToLabelMap = new Map();
        if(docData.header?.fields) {
            docData.header.fields.forEach(field => fieldIdToLabelMap.set(field.id, field.label));
        }
        if (docData.sampleInfo?.fields) {
            docData.sampleInfo.fields.forEach(field => fieldIdToLabelMap.set(field.id, field.label));
        }
        if (docData.dataInputs?.sections) {
            docData.dataInputs.sections.forEach((section, sIdx) => {
                section.fields.forEach((field, fIdx) => {
                    const cellId = `A${getGlobalFieldIndex(docData.dataInputs.sections, sIdx, fIdx) + 1}`;
                    fieldIdToLabelMap.set(cellId, field.label);
                });
            });
        }
        const verificationBody = Object.entries(template.document_data.verification_data)
            .map(([key, value]) => [fieldIdToLabelMap.get(key) || key, String(value)]);

         autoTable(doc, {
            startY: finalY + 10,
            head: [[{content: titleContent, colSpan: 2, styles: {fontStyle: 'bold', fillColor: '#d3d3d3', textColor: 0}}]],
            body: verificationBody,
            theme: 'grid',
            margin: tableMargin,
            didDrawPage,
        });
        finalY = (doc as any).lastAutoTable.finalY;
    }
    
    const hasHistorySection = selectedSections.includes('Signatures') || selectedSections.includes('Template History');
    if (hasHistorySection) {
        autoTable(doc, {
            startY: finalY + 10,
            head: [[{ content: `${sectionCounter}. Approvals & History`, colSpan: 6, styles: { fontStyle: 'bold', fillColor: '#d3d3d3', textColor: 0 } }]],
            margin: tableMargin,
            didDrawPage,
        });
        finalY = (doc as any).lastAutoTable.finalY;
    }
    
     if (selectedSections.includes('Signatures') && template.signatures?.length > 0) {
        autoTable(doc, {
            startY: finalY + 1, // Start right after the title
            head: [['Action', 'Signed By', 'Date & Time']],
            body: template.signatures.map(s => [s.meaning, s.signed_by.username, new Date(s.signed_at).toLocaleString()]),
            margin: tableMargin,
            didDrawPage,
        });
        finalY = (doc as any).lastAutoTable.finalY;
    }

    if (selectedSections.includes('Template History') && template.audit_trail?.length > 0) {
        autoTable(doc, {
            startY: finalY + 10,
            head: [['Date & Time', 'User', 'Action', 'Reason', 'Old Value', 'New Value']],
            body: template.audit_trail.map(log => [new Date(log.timestamp).toLocaleString(), log.user.username, log.details, log.reason_for_change, log.previous_value, log.new_value]),
            margin: tableMargin,
            didDrawPage,
        });
    }
    
    addHeaderAndFooter(doc, docTitle, user, { pageNumber: (doc as any).internal.getNumberOfPages() });
    doc.save(`Template_${template.name.replace(/ /g, '_')}_${template.version}_Report.pdf`);
};